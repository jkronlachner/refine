{"version":3,"sources":["../src/index.ts","../src/types/index.ts","../src/utils/mapOperator.ts","../src/utils/generateFilter.ts","../src/utils/handleError.ts","../src/dataProvider/index.ts","../src/liveProvider/index.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\nimport {} from \"@supabase/supabase-js/dist/main/lib/types\";\n\nexport * from \"./types/index.js\";\nexport * from \"./utils/index.js\";\nexport * from \"./dataProvider/index.js\";\nexport * from \"./liveProvider/index.js\";\n\nexport { createClient };\n","import type { LiveEvent } from \"@refinedev/core\";\nimport { REALTIME_POSTGRES_CHANGES_LISTEN_EVENT } from \"@supabase/supabase-js\";\n\nexport const liveTypes: Record<\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT,\n  LiveEvent[\"type\"]\n> = {\n  INSERT: \"created\",\n  UPDATE: \"updated\",\n  DELETE: \"deleted\",\n  \"*\": \"*\",\n};\n\nexport const supabaseTypes: Record<\n  LiveEvent[\"type\"],\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT\n> = {\n  created: REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT,\n  updated: REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE,\n  deleted: REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE,\n  \"*\": REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL,\n};\n","import type { CrudOperators } from \"@refinedev/core\";\n\nexport const mapOperator = (operator: CrudOperators) => {\n  switch (operator) {\n    case \"ne\":\n      return \"neq\";\n    case \"nin\":\n      return \"not.in\";\n    case \"contains\":\n      return \"ilike\";\n    case \"ncontains\":\n      return \"not.ilike\";\n    case \"containss\":\n      return \"like\";\n    case \"ncontainss\":\n      return \"not.like\";\n    case \"null\":\n      return \"is\";\n    case \"nnull\":\n      return \"not.is\";\n    case \"ina\":\n      return \"cs\";\n    case \"nina\":\n      return \"not.cs\";\n    case \"between\":\n    case \"nbetween\":\n      throw Error(`Operator ${operator} is not supported`);\n    default:\n      return operator;\n  }\n};\n","import type { CrudFilter } from \"@refinedev/core\";\nimport { mapOperator } from \"./mapOperator\";\n\nexport const generateFilter = (filter: CrudFilter, query: any) => {\n  switch (filter.operator) {\n    case \"eq\":\n      return query.eq(filter.field, filter.value);\n    case \"ne\":\n      return query.neq(filter.field, filter.value);\n    case \"in\":\n      return query.in(filter.field, filter.value);\n    case \"ina\":\n      return query.contains(filter.field, filter.value);\n    case \"nina\":\n      return query.not(\n        filter.field,\n        \"cs\",\n        `{${filter.value.map((val: any) => `\"${val}\"`).join(\",\")}}`,\n      );\n\n    case \"gt\":\n      return query.gt(filter.field, filter.value);\n    case \"gte\":\n      return query.gte(filter.field, filter.value);\n    case \"lt\":\n      return query.lt(filter.field, filter.value);\n    case \"lte\":\n      return query.lte(filter.field, filter.value);\n    case \"between\":\n      if (filter.value.length !== 2) {\n        throw new Error(\n          `[@refinedev/supabase]: Unexpected length ${filter.value.length}. Between operator expects a range between 2 values.`,\n        );\n      }\n      return query\n        .gte(filter.field, filter.value[0])\n        .lte(filter.field, filter.value[1]);\n    case \"contains\":\n      return query.ilike(filter.field, `%${filter.value}%`);\n    case \"containss\":\n      return query.like(filter.field, `%${filter.value}%`);\n    case \"null\":\n      return query.is(filter.field, null);\n    case \"startswith\":\n      return query.ilike(filter.field, `${filter.value}%`);\n    case \"endswith\":\n      return query.ilike(filter.field, `%${filter.value}`);\n    case \"or\": {\n      const orSyntax = filter.value\n        .map((item) => {\n          if (\n            item.operator !== \"or\" &&\n            item.operator !== \"and\" &&\n            \"field\" in item\n          ) {\n            let value = item.value;\n\n            if (item.operator === \"ina\" || item.operator === \"nina\") {\n              value = `{${item.value.map((val: any) => `\"${val}\"`).join(\",\")}}`;\n            }\n\n            if (item.operator === \"contains\" || item.operator === \"containss\") {\n              value = `%${value}%`;\n            }\n\n            if (item.operator === \"startswith\") {\n              value = `${value}%`;\n            }\n\n            if (item.operator === \"endswith\") {\n              value = `%${value}`;\n            }\n            if (item.operator === \"in\") {\n              value = `(${item.value.map((val: any) => `\"${val}\"`).join(\",\")})`;\n            }\n\n            return `${item.field}.${mapOperator(item.operator)}.${value}`;\n          }\n          return;\n        })\n        .join(\",\");\n      return query.or(orSyntax);\n    }\n\n    case \"and\":\n      throw Error(\"Operator 'and' is not supported\");\n    default:\n      return query.filter(\n        filter.field,\n        mapOperator(filter.operator),\n        filter.value,\n      );\n  }\n};\n","import type { HttpError } from \"@refinedev/core\";\nimport type { PostgrestError } from \"@supabase/supabase-js\";\n\nexport const handleError = (error: PostgrestError) => {\n  const customError: HttpError = {\n    ...error,\n    message: error.message,\n    statusCode: Number.parseInt(error.code),\n  };\n  return Promise.reject(customError);\n};\n","import type { DataProvider } from \"@refinedev/core\";\nimport type { SupabaseClient } from \"@supabase/supabase-js\";\nimport { generateFilter, handleError } from \"../utils\";\n\nexport const dataProvider = (\n  supabaseClient: SupabaseClient<any, any, any>,\n): Required<DataProvider> => {\n  return {\n    getList: async ({ resource, pagination, filters, sorters, meta }) => {\n      const { current = 1, pageSize = 10, mode = \"server\" } = pagination ?? {};\n\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).select(meta?.select ?? \"*\", {\n        count: meta?.count ?? \"exact\",\n      });\n\n      if (mode === \"server\") {\n        query.range((current - 1) * pageSize, current * pageSize - 1);\n      }\n\n      sorters?.map((item) => {\n        const [foreignTable, field] = item.field.split(/\\.(?=[^.]+$)/);\n\n        if (foreignTable && field) {\n          query\n            .select(meta?.select ?? `*, ${foreignTable}(${field})`)\n            .order(field, {\n              ascending: item.order === \"asc\",\n              foreignTable: foreignTable,\n            });\n        } else {\n          query.order(item.field, {\n            ascending: item.order === \"asc\",\n          });\n        }\n      });\n\n      filters?.map((item) => {\n        generateFilter(item, query);\n      });\n\n      const { data, count, error } = await query;\n\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: data || [],\n        total: count || 0,\n      } as any;\n    },\n\n    getMany: async ({ resource, ids, meta }) => {\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).select(meta?.select ?? \"*\");\n\n      if (meta?.idColumnName) {\n        query.in(meta.idColumnName, ids);\n      } else {\n        query.in(\"id\", ids);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: data || [],\n      } as any;\n    },\n\n    create: async ({ resource, variables, meta }) => {\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).insert(variables);\n\n      query.select(meta?.select ?? \"*\");\n\n      const { data, error } = await query;\n\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: (data || [])[0] as any,\n      };\n    },\n\n    createMany: async ({ resource, variables, meta }) => {\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).insert(variables);\n\n      query.select(meta?.select ?? \"*\");\n\n      const { data, error } = await query;\n\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: data as any,\n      };\n    },\n\n    update: async ({ resource, id, variables, meta }) => {\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).update(variables);\n\n      if (meta?.idColumnName) {\n        query.eq(meta.idColumnName, id);\n      } else {\n        query.match({ id });\n      }\n\n      query.select(meta?.select ?? \"*\");\n\n      const { data, error } = await query;\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: (data || [])[0] as any,\n      };\n    },\n\n    updateMany: async ({ resource, ids, variables, meta }) => {\n      const response = await Promise.all(\n        ids.map(async (id) => {\n          const client = meta?.schema\n            ? supabaseClient.schema(meta.schema)\n            : supabaseClient;\n\n          const query = client.from(resource).update(variables);\n\n          if (meta?.idColumnName) {\n            query.eq(meta.idColumnName, id);\n          } else {\n            query.match({ id });\n          }\n\n          query.select(meta?.select ?? \"*\");\n\n          const { data, error } = await query;\n          if (error) {\n            return handleError(error);\n          }\n\n          return (data || [])[0] as any;\n        }),\n      );\n\n      return {\n        data: response,\n      };\n    },\n\n    getOne: async ({ resource, id, meta }) => {\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).select(meta?.select ?? \"*\");\n\n      if (meta?.idColumnName) {\n        query.eq(meta.idColumnName, id);\n      } else {\n        query.match({ id });\n      }\n\n      const { data, error } = await query;\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: (data || [])[0] as any,\n      };\n    },\n\n    deleteOne: async ({ resource, id, meta }) => {\n      const client = meta?.schema\n        ? supabaseClient.schema(meta.schema)\n        : supabaseClient;\n\n      const query = client.from(resource).delete();\n\n      if (meta?.idColumnName) {\n        query.eq(meta.idColumnName, id);\n      } else {\n        query.match({ id });\n      }\n\n      const { data, error } = await query;\n      if (error) {\n        return handleError(error);\n      }\n\n      return {\n        data: (data || [])[0] as any,\n      };\n    },\n\n    deleteMany: async ({ resource, ids, meta }) => {\n      const response = await Promise.all(\n        ids.map(async (id) => {\n          const client = meta?.schema\n            ? supabaseClient.schema(meta.schema)\n            : supabaseClient;\n\n          const query = client.from(resource).delete();\n\n          if (meta?.idColumnName) {\n            query.eq(meta.idColumnName, id);\n          } else {\n            query.match({ id });\n          }\n\n          const { data, error } = await query;\n          if (error) {\n            return handleError(error);\n          }\n\n          return (data || [])[0] as any;\n        }),\n      );\n\n      return {\n        data: response,\n      };\n    },\n\n    getApiUrl: () => {\n      throw Error(\"Not implemented on refine-supabase data provider.\");\n    },\n\n    custom: () => {\n      throw Error(\"Not implemented on refine-supabase data provider.\");\n    },\n  };\n};\n","import type { LiveProvider, CrudFilter, CrudFilters } from \"@refinedev/core\";\nimport type {\n  RealtimeChannel,\n  RealtimePostgresChangesPayload,\n  SupabaseClient,\n} from \"@supabase/supabase-js\";\nimport { liveTypes, supabaseTypes } from \"../types\";\nimport { mapOperator } from \"../utils\";\n\nexport const liveProvider = (\n  supabaseClient: SupabaseClient<any, any, any>,\n): LiveProvider => {\n  return {\n    subscribe: ({\n      channel,\n      types,\n      params,\n      callback,\n      meta,\n    }): RealtimeChannel => {\n      const resource = channel.replace(\"resources/\", \"\");\n\n      const listener = (payload: RealtimePostgresChangesPayload<any>) => {\n        if (\n          types.includes(\"*\") ||\n          types.includes(liveTypes[payload.eventType])\n        ) {\n          if (\n            liveTypes[payload.eventType] !== \"created\" &&\n            params?.ids !== undefined &&\n            payload.new?.id !== undefined\n          ) {\n            if (params.ids.map(String).includes(payload.new.id.toString())) {\n              callback({\n                channel,\n                type: liveTypes[payload.eventType],\n                date: new Date(payload.commit_timestamp),\n                payload: payload.new,\n              });\n            }\n          } else {\n            callback({\n              channel,\n              type: liveTypes[payload.eventType],\n              date: new Date(payload.commit_timestamp),\n              payload: payload.new,\n            });\n          }\n        }\n      };\n\n      const mapFilter = (filters?: CrudFilters): string | undefined => {\n        if (!filters || filters?.length === 0) {\n          return;\n        }\n\n        return filters\n          .map((filter: CrudFilter): string | undefined => {\n            if (\"field\" in filter) {\n              return `${filter.field}=${mapOperator(filter.operator)}.${\n                filter.value\n              }`;\n            }\n            return;\n          })\n          .filter(Boolean)\n          .join(\",\");\n      };\n\n      const events = types\n        .map((x) => supabaseTypes[x])\n        .sort((a, b) => a.localeCompare(b));\n      const filter = mapFilter(params?.filters);\n      const ch = `${channel}:${events.join(\"|\")}${filter ? `:${filter}` : \"\"}`;\n\n      let client = supabaseClient.channel(ch);\n      for (let i = 0; i < events.length; i++) {\n        client = client.on(\n          \"postgres_changes\",\n          {\n            event: events[i] as any,\n            schema:\n              meta?.schema ||\n              // @ts-expect-error TS2445 Property rest is protected and only accessible within class SupabaseClient and its subclasses.\n              supabaseClient?.rest?.schemaName ||\n              \"public\",\n            table: resource,\n            filter: filter,\n          },\n          listener,\n        );\n      }\n\n      return client.subscribe();\n    },\n\n    unsubscribe: async (channel: RealtimeChannel) => {\n      supabaseClient.removeChannel(channel);\n    },\n  };\n};\n"],"mappings":"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","names":["src_exports","__export","dataProvider","generateFilter","handleError","liveProvider","liveTypes","mapOperator","supabaseTypes","__toCommonJS","import_supabase_js","import_supabase_js","liveTypes","supabaseTypes","mapOperator","operator","generateFilter","filter","query","val","orSyntax","item","value","mapOperator","handleError","error","customError","dataProvider","supabaseClient","resource","pagination","filters","sorters","meta","current","pageSize","mode","query","item","foreignTable","field","generateFilter","data","count","error","handleError","ids","variables","id","liveProvider","supabaseClient","channel","types","params","callback","meta","_a","resource","listener","payload","liveTypes","mapFilter","filters","filter","mapOperator","events","x","supabaseTypes","a","b","ch","client","i"]}